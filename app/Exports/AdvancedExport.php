<?php

namespace App\Exports;

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Color;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
use Illuminate\Support\Carbon;

class AdvancedExport
{
    /**
     * Export data to Excel with styling and multiple sheets using PhpSpreadsheet
     *
     * @param array $data
     * @param string $filename
     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
     */
    public static function export($data, $filename = 'advanced-export')
    {
        // Create new Spreadsheet object
        $spreadsheet = new Spreadsheet();
        
        // Set document properties
        $spreadsheet->getProperties()
            ->setCreator('Pleasanter App')
            ->setCompany('Pleasanter')
            ->setTitle('Pleasanter Export')
            ->setDescription('Excel export from Pleasanter');
        
        // Get the active sheet (first sheet)
        $mainSheet = $spreadsheet->getActiveSheet();
        $mainSheet->setTitle('Main Data');
        
        // Add data to the main sheet
        $mainSheet->fromArray($data, null, 'A1');
        
        // Style the header row
        $headerRange = 'A1:' . self::columnLetter(count($data[0])) . '1';
        $mainSheet->getStyle($headerRange)->applyFromArray([
            'font' => [
                'bold' => true,
                'color' => ['rgb' => 'FFFFFF'],
            ],
            'fill' => [
                'fillType' => Fill::FILL_SOLID,
                'startColor' => ['rgb' => '4472C4'],
            ],
        ]);
        
        // Auto size columns
        $columnCount = count($data[0]);
        for ($col = 0; $col < $columnCount; $col++) {
            $mainSheet->getColumnDimension(self::columnLetter($col))->setAutoSize(true);
        }
        
        // Freeze the first row
        $mainSheet->freezePane('A2');
        
        // Create a new sheet for summary
        $summarySheet = $spreadsheet->createSheet();
        $summarySheet->setTitle('Summary');
        
        // Skip header row for count
        $dataCount = count($data) - 1;
        
        // Add summary data
        $summaryData = [
            ['Summary Information'],
            ['Total Records', $dataCount],
            ['Generated At', Carbon::now()->format('Y-m-d H:i:s')],
            ['Generated By', 'Pleasanter Export Excel']
        ];
        
        $summarySheet->fromArray($summaryData, null, 'A1');
        
        // Merge cells for the header
        $summarySheet->mergeCells('A1:B1');
        
        // Style the header
        $summarySheet->getStyle('A1')->applyFromArray([
            'font' => [
                'bold' => true,
                'size' => 14,
            ],
            'alignment' => [
                'horizontal' => Alignment::HORIZONTAL_CENTER,
            ],
        ]);
        
        // Style the data rows
        $summarySheet->getStyle('A2:A4')->applyFromArray([
            'font' => [
                'bold' => true,
            ],
        ]);
        
        // Auto size columns
        $summarySheet->getColumnDimension('A')->setAutoSize(true);
        $summarySheet->getColumnDimension('B')->setAutoSize(true);
        
        // Create a temporary file
        $tempFile = storage_path('app/temp/' . $filename . '.xlsx');
        
        // Ensure the directory exists
        if (!file_exists(dirname($tempFile))) {
            mkdir(dirname($tempFile), 0755, true);
        }
        
        // Save the spreadsheet to the file
        $writer = new Xlsx($spreadsheet);
        $writer->save($tempFile);
        
        // Create response with the file
        $response = new BinaryFileResponse($tempFile);
        $response->setContentDisposition(
            ResponseHeaderBag::DISPOSITION_ATTACHMENT,
            $filename . '.xlsx'
        );
        
        // Register a callback to delete the file after sending the response
        $response->deleteFileAfterSend(true);
        
        return $response;
    }
    
    /**
     * Convert column number to letter (e.g., 0 = A, 1 = B, etc.)
     *
     * @param int $columnNumber
     * @return string
     */
    private static function columnLetter($columnNumber)
    {
        $columnLetter = '';
        while ($columnNumber >= 0) {
            $columnLetter = chr(65 + ($columnNumber % 26)) . $columnLetter;
            $columnNumber = floor($columnNumber / 26) - 1;
        }
        return $columnLetter;
    }
}